extend type Query {
  """
  ✨ Look up a single `Event` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  event(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Event_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Event_FirstRow
  ): Event @fdc_generated(from: "Event", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `EventInstance` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  eventInstance(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: EventInstance_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: EventInstance_FirstRow
  ): EventInstance @fdc_generated(from: "EventInstance", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `RecurringEvent` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  recurringEvent(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: RecurringEvent_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: RecurringEvent_FirstRow
  ): RecurringEvent @fdc_generated(from: "RecurringEvent", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Registration` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  registration(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Registration_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Registration_FirstRow
  ): Registration @fdc_generated(from: "Registration", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Event` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  events(
    """
    Filter condition to narrow down the query results.
    """
    where: Event_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Event_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Event_Having
  ): [Event!]! @fdc_generated(from: "Event", purpose: QUERY_MULTIPLE)
  """
  ✨ List `EventInstance` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  eventInstances(
    """
    Filter condition to narrow down the query results.
    """
    where: EventInstance_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [EventInstance_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: EventInstance_Having
  ): [EventInstance!]! @fdc_generated(from: "EventInstance", purpose: QUERY_MULTIPLE)
  """
  ✨ List `RecurringEvent` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  recurringEvents(
    """
    Filter condition to narrow down the query results.
    """
    where: RecurringEvent_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RecurringEvent_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: RecurringEvent_Having
  ): [RecurringEvent!]! @fdc_generated(from: "RecurringEvent", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Registration` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  registrations(
    """
    Filter condition to narrow down the query results.
    """
    where: Registration_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Registration_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Registration_Having
  ): [Registration!]! @fdc_generated(from: "Registration", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
