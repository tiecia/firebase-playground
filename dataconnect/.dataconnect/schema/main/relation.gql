extend type Event {
  """
  ✨ List `EventInstance` objects in a one-to-many relationship (where `EventInstance`.`event` is this object).
  """
  eventInstances_on_event(
    """
    Filter condition to narrow down the query results.
    """
    where: EventInstance_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [EventInstance_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: EventInstance_Having
  ): [EventInstance!]! @fdc_generated(from: "EventInstance.event", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `RecurringEvent` objects in a one-to-many relationship (where `RecurringEvent`.`event` is this object).
  """
  recurringEvents_on_event(
    """
    Filter condition to narrow down the query results.
    """
    where: RecurringEvent_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RecurringEvent_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: RecurringEvent_Having
  ): [RecurringEvent!]! @fdc_generated(from: "RecurringEvent.event", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Event", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Event` table.
  """
  _count: Int! @fdc_generated(from: "Event", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `creatorId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  creatorId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.creatorId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `endTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.endTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `isRecurring` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isRecurring_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.isRecurring", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `isRegisterable` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isRegisterable_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.isRegisterable", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `location` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  location_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.location", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `maxRegistrants` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  maxRegistrants_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.maxRegistrants", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `startTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.startTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Event` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Event.title", purpose: QUERY_COUNT)
  """
  ✨ Sum the `maxRegistrants` field in the `Event` table.
  """
  maxRegistrants_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Event.maxRegistrants", purpose: QUERY_SUM)
  """
  ✨ Average the `maxRegistrants` field in the `Event` table.
  """
  maxRegistrants_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Event.maxRegistrants", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `Event` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Event.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endTime` field in the `Event` table.
  """
  endTime_min: Timestamp @fdc_generated(from: "Event.endTime", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `maxRegistrants` field in the `Event` table.
  """
  maxRegistrants_min: Int @fdc_generated(from: "Event.maxRegistrants", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startTime` field in the `Event` table.
  """
  startTime_min: Timestamp @fdc_generated(from: "Event.startTime", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Event` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Event.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endTime` field in the `Event` table.
  """
  endTime_max: Timestamp @fdc_generated(from: "Event.endTime", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `maxRegistrants` field in the `Event` table.
  """
  maxRegistrants_max: Int @fdc_generated(from: "Event.maxRegistrants", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startTime` field in the `Event` table.
  """
  startTime_max: Timestamp @fdc_generated(from: "Event.startTime", purpose: QUERY_MAX)
}
extend type EventInstance {
  """
  ✨ List `Registration` objects in a one-to-many relationship (where `Registration`.`eventInstance` is this object).
  """
  registrations_on_eventInstance(
    """
    Filter condition to narrow down the query results.
    """
    where: Registration_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Registration_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Registration_Having
  ): [Registration!]! @fdc_generated(from: "Registration.eventInstance", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "EventInstance", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `EventInstance` table.
  """
  _count: Int! @fdc_generated(from: "EventInstance", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `EventInstance` table where the `endTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "EventInstance.endTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `EventInstance` table where the `eventId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  eventId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "EventInstance.eventId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `EventInstance` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "EventInstance.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `EventInstance` table where the `startTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "EventInstance.startTime", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `endTime` field in the `EventInstance` table.
  """
  endTime_min: Timestamp @fdc_generated(from: "EventInstance.endTime", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startTime` field in the `EventInstance` table.
  """
  startTime_min: Timestamp @fdc_generated(from: "EventInstance.startTime", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `endTime` field in the `EventInstance` table.
  """
  endTime_max: Timestamp @fdc_generated(from: "EventInstance.endTime", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startTime` field in the `EventInstance` table.
  """
  startTime_max: Timestamp @fdc_generated(from: "EventInstance.startTime", purpose: QUERY_MAX)
}
extend type RecurringEvent {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "RecurringEvent", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `RecurringEvent` table.
  """
  _count: Int! @fdc_generated(from: "RecurringEvent", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `RecurringEvent` table where the `dayOfMonth` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  dayOfMonth_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "RecurringEvent.dayOfMonth", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `RecurringEvent` table where the `endDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "RecurringEvent.endDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `RecurringEvent` table where the `eventId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  eventId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "RecurringEvent.eventId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `RecurringEvent` table where the `frequency` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  frequency_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "RecurringEvent.frequency", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `RecurringEvent` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "RecurringEvent.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `RecurringEvent` table where the `interval` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  interval_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "RecurringEvent.interval", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `RecurringEvent` table where the `monthOfYear` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  monthOfYear_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "RecurringEvent.monthOfYear", purpose: QUERY_COUNT)
  """
  ✨ Sum the `dayOfMonth` field in the `RecurringEvent` table.
  """
  dayOfMonth_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "RecurringEvent.dayOfMonth", purpose: QUERY_SUM)
  """
  ✨ Sum the `interval` field in the `RecurringEvent` table.
  """
  interval_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "RecurringEvent.interval", purpose: QUERY_SUM)
  """
  ✨ Sum the `monthOfYear` field in the `RecurringEvent` table.
  """
  monthOfYear_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "RecurringEvent.monthOfYear", purpose: QUERY_SUM)
  """
  ✨ Average the `dayOfMonth` field in the `RecurringEvent` table.
  """
  dayOfMonth_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "RecurringEvent.dayOfMonth", purpose: QUERY_AVG)
  """
  ✨ Average the `interval` field in the `RecurringEvent` table.
  """
  interval_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "RecurringEvent.interval", purpose: QUERY_AVG)
  """
  ✨ Average the `monthOfYear` field in the `RecurringEvent` table.
  """
  monthOfYear_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "RecurringEvent.monthOfYear", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `dayOfMonth` field in the `RecurringEvent` table.
  """
  dayOfMonth_min: Int @fdc_generated(from: "RecurringEvent.dayOfMonth", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endDate` field in the `RecurringEvent` table.
  """
  endDate_min: Timestamp @fdc_generated(from: "RecurringEvent.endDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `interval` field in the `RecurringEvent` table.
  """
  interval_min: Int @fdc_generated(from: "RecurringEvent.interval", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `monthOfYear` field in the `RecurringEvent` table.
  """
  monthOfYear_min: Int @fdc_generated(from: "RecurringEvent.monthOfYear", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `dayOfMonth` field in the `RecurringEvent` table.
  """
  dayOfMonth_max: Int @fdc_generated(from: "RecurringEvent.dayOfMonth", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endDate` field in the `RecurringEvent` table.
  """
  endDate_max: Timestamp @fdc_generated(from: "RecurringEvent.endDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `interval` field in the `RecurringEvent` table.
  """
  interval_max: Int @fdc_generated(from: "RecurringEvent.interval", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `monthOfYear` field in the `RecurringEvent` table.
  """
  monthOfYear_max: Int @fdc_generated(from: "RecurringEvent.monthOfYear", purpose: QUERY_MAX)
}
extend type Registration {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Registration", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Registration` table.
  """
  _count: Int! @fdc_generated(from: "Registration", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Registration` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Registration.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Registration` table where the `eventInstanceId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  eventInstanceId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Registration.eventInstanceId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Registration` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Registration.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Registration` table where the `registrationDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  registrationDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Registration.registrationDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Registration` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Registration.userId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Registration` table where the `waitlist` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  waitlist_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Registration.waitlist", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Registration` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Registration.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `registrationDate` field in the `Registration` table.
  """
  registrationDate_min: Date @fdc_generated(from: "Registration.registrationDate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Registration` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Registration.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `registrationDate` field in the `Registration` table.
  """
  registrationDate_max: Date @fdc_generated(from: "Registration.registrationDate", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `Event` objects in a one-to-many relationship (where `Event`.`creator` is this object).
  """
  events_on_creator(
    """
    Filter condition to narrow down the query results.
    """
    where: Event_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Event_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Event_Having
  ): [Event!]! @fdc_generated(from: "Event.creator", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Registration` objects in a one-to-many relationship (where `Registration`.`user` is this object).
  """
  registrations_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Registration_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Registration_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Registration_Having
  ): [Registration!]! @fdc_generated(from: "Registration.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `photoUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  photoUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.photoUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.userId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
}
